// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CandidatesServiceClient is the client API for CandidatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandidatesServiceClient interface {
	CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*CreateCandidateResponse, error)
	GetCandidate(ctx context.Context, in *GetCandidateRequest, opts ...grpc.CallOption) (*GetCandidateResponse, error)
	SearchCandidates(ctx context.Context, in *SearchCandidatesRequest, opts ...grpc.CallOption) (*SearchCandidatesResponse, error)
}

type candidatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandidatesServiceClient(cc grpc.ClientConnInterface) CandidatesServiceClient {
	return &candidatesServiceClient{cc}
}

func (c *candidatesServiceClient) CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*CreateCandidateResponse, error) {
	out := new(CreateCandidateResponse)
	err := c.cc.Invoke(ctx, "/CandidatesService/CreateCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidatesServiceClient) GetCandidate(ctx context.Context, in *GetCandidateRequest, opts ...grpc.CallOption) (*GetCandidateResponse, error) {
	out := new(GetCandidateResponse)
	err := c.cc.Invoke(ctx, "/CandidatesService/GetCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidatesServiceClient) SearchCandidates(ctx context.Context, in *SearchCandidatesRequest, opts ...grpc.CallOption) (*SearchCandidatesResponse, error) {
	out := new(SearchCandidatesResponse)
	err := c.cc.Invoke(ctx, "/CandidatesService/SearchCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandidatesServiceServer is the server API for CandidatesService service.
// All implementations must embed UnimplementedCandidatesServiceServer
// for forward compatibility
type CandidatesServiceServer interface {
	CreateCandidate(context.Context, *CreateCandidateRequest) (*CreateCandidateResponse, error)
	GetCandidate(context.Context, *GetCandidateRequest) (*GetCandidateResponse, error)
	SearchCandidates(context.Context, *SearchCandidatesRequest) (*SearchCandidatesResponse, error)
	mustEmbedUnimplementedCandidatesServiceServer()
}

// UnimplementedCandidatesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCandidatesServiceServer struct {
}

func (UnimplementedCandidatesServiceServer) CreateCandidate(context.Context, *CreateCandidateRequest) (*CreateCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCandidate not implemented")
}
func (UnimplementedCandidatesServiceServer) GetCandidate(context.Context, *GetCandidateRequest) (*GetCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidate not implemented")
}
func (UnimplementedCandidatesServiceServer) SearchCandidates(context.Context, *SearchCandidatesRequest) (*SearchCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCandidates not implemented")
}
func (UnimplementedCandidatesServiceServer) mustEmbedUnimplementedCandidatesServiceServer() {}

// UnsafeCandidatesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandidatesServiceServer will
// result in compilation errors.
type UnsafeCandidatesServiceServer interface {
	mustEmbedUnimplementedCandidatesServiceServer()
}

func RegisterCandidatesServiceServer(s grpc.ServiceRegistrar, srv CandidatesServiceServer) {
	s.RegisterService(&CandidatesService_ServiceDesc, srv)
}

func _CandidatesService_CreateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidatesServiceServer).CreateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CandidatesService/CreateCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidatesServiceServer).CreateCandidate(ctx, req.(*CreateCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidatesService_GetCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidatesServiceServer).GetCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CandidatesService/GetCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidatesServiceServer).GetCandidate(ctx, req.(*GetCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidatesService_SearchCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidatesServiceServer).SearchCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CandidatesService/SearchCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidatesServiceServer).SearchCandidates(ctx, req.(*SearchCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CandidatesService_ServiceDesc is the grpc.ServiceDesc for CandidatesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandidatesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CandidatesService",
	HandlerType: (*CandidatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCandidate",
			Handler:    _CandidatesService_CreateCandidate_Handler,
		},
		{
			MethodName: "GetCandidate",
			Handler:    _CandidatesService_GetCandidate_Handler,
		},
		{
			MethodName: "SearchCandidates",
			Handler:    _CandidatesService_SearchCandidates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-service/candidate-service.proto",
}
